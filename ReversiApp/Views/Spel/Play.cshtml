@using Microsoft.AspNetCore.Identity
@using ReversiApp.Areas.Identity.Data
@model ReversiApp.Models.Spel
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager

@{
    ViewData["Title"] = "Play";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var user = await UserManager.GetUserAsync(User);
    var kleur = user.Kleur == Kleur.Wit ? 1 : 2;
}
    <div>
        <h1>Spel</h1>
        <form asp-action="Leave">
            <input type="hidden" asp-for="ID" />
            <input type="submit" value="Leave game" class="btn btn-danger" />
        </form>
        <ul>
            <li>
                @Html.DisplayNameFor(model => model.Omschrijving):
                @Html.DisplayFor(model => model.Omschrijving)
            </li>
            <li>
                Eigen kleur:
                @user.Kleur
            </li>
            <li>Ronde: <span class="game_statistics__round"></span></li>
            <li>Aan de beurt: <span class="game_statistics__aandebeurt"></span></li>
            <li class="quote-container"></li>
        </ul>

        <div class="grid-container"></div>
        <div class="chart-container">
            <canvas id="myChart"></canvas>
        </div>
    </div>
<script>
    function afterInit() {
        console.log('Game init voltooid');
    }

    $(function() {
        Game.init(afterInit);
        Game.Stats.init();
        Game.Api.init();
        Game.Reversi.init(@Html.DisplayFor(model => model.ID), @kleur);
            
        Game.Template.init();

        var table = { row: [0,1,2,3,4,5,6,7], column: [0,1,2,3,4,5,6,7]};
        $('.grid-container').append(Game.Template.parseTemplate("spel", table));
    });
</script>

